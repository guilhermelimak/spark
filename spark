#!/usr/bin/python
import requests
import os
import json
import sys

dir_name = os.path.split(os.getcwd())[-1]
username = "YOUR_GITHUB_USERNAME"
token = "YOUR_GITHUB_PERSONAL_ACCESS_TOKEN"
auth = (username, token)
commit_flag = False
init_flag = False
help_flag = False
ssh_flag = False

repo_name = dir_name

def help():
    helpMessage = """Usage: Spark (creates a new repository with working directory as name and add the remote.)
       Use -c to add --all, commit and push the work you have in the working directory as the initial commit.
       Use -i to git init the working directory.
       Use -s to clone the repo using ssh instead of html.
       Use -n to specify a name to the repo instead of using the folder name
       Use -h to print this help."""

    print helpMessage

def create_github_repo(auth):
    params = {
        "name":repo_name 
    }

    json_params = json.dumps(params)

    request_url = "https://api.github.com/user/repos"
    r = requests.post(request_url, auth=auth, data=json_params)
    data = json.loads(r.text)

    http_url = data["clone_url"] 
    ssh_url = data["ssh_url"]
    
    return [http_url, ssh_url] 

def git_init():
        os.system("git init")

def add_remote(clone_url, url_type):
    if url_type == "ssh":
        pass
    elif url_type == "https":
        clone_url = clone_url[8:]
        clone_url = "https://" + username + "@" + clone_url
    else:
        print "You must set a URL type"

    command = "git remote add origin %s" % (clone_url)

    os.system(command)

def first_commit():
    os.system("git add --all")
    os.system('git commit -m "Initial commit"')
    os.system("git push -u origin master")

def check_empty():
    if os.listdir(os.getcwd()) == ['.git'] or os.listdir(os.getcwd()) == []:
        return True
    else:
        return False

def spark_it():
    http_url, ssh_url = create_github_repo(auth)

    if init_flag == True:
        git_init()

    if ssh_flag == True:
        add_remote(ssh_url, "ssh")
    else:
        add_remote(http_url, "https")

    if commit_flag == True:
        if check_empty() is False:
            first_commit()
        else:
            print "There's nothing to commit here."

def getArgs():
    for i in sys.argv:
        if sys.argv.index(i) == 0:
            pass
        else:
            if i == "-c":
                global commit_flag
                commit_flag = True
            elif i == "-i":
                global init_flag
                init_flag = True 
            elif i == "-s":
                global ssh_flag
                ssh_flag = True
                break
            elif i == "-h":
                global help_flag
                help_flag = True
                break
            elif i == "-n":
                nameIndex = sys.argv.index(i) + 1
                global repo_name
                repo_name = sys.argv[nameIndex]

def main():
    getArgs()
    if help_flag == True:
        help()
    else:
        spark_it()
    
if __name__ == '__main__':
    main()
