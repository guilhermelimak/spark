#!/usr/bin/python

import requests
import os
import json
import sys

dir_name = os.path.split(os.getcwd())[-1]
username = "YOUR_GITHUB_USERNAME"
token = "YOUR_GITHUB_PERSONAL_ACCESS_TOKEN"
auth = (username, token)

commit_flag = False
init_flag = False
help_flag = False

params = {
    "name":dir_name 
}

json_params = json.dumps(params)

def help():
    helpMessage = """Usage: spark (creates a new repository with working directory as name and add the remote.)
       Use -c to add --all and commit the work you have in the working directory as the initial commit.
       Use -i to git init the working directory."""

    print helpMessage

def create_github_repo(auth, json_params):
    request_url = "https://api.github.com/user/repos"
    r = requests.post(request_url, auth=auth, data=json_params)
    data = json.loads(r.text)
    print r.text
    clone_url = data["clone_url"] 

    return clone_url 

def git_init():
    os.system("git init")

def add_remote(clone_url):
    clone_url = clone_url[8:]
    clone_url = "https://" + username + "@" + clone_url
    command = "git remote add origin %s" % (clone_url)

    os.system(command)

def first_commit():
    os.system("git add --all")
    os.system('git commit -m "Initial commit"')
    os.system("git push -u origin master")

def check_empty():
    if os.listdir(os.getcwd()) == ['.git'] or os.listdir(os.getcwd()) == []:
        return True
    else:
        return False

def spark_it():
    clone_url = create_github_repo(auth, json_params)

    if init_flag == True:
        git_init()

    add_remote(clone_url)

    if commit_flag == True:
        if check_empty() is False:
            first_commit()
        else:
            print "There's nothing to commit here."

def getArgs():
        for i in sys.argv:
            if sys.argv.index(i) == 0:
                pass
            else:
                if i == "-c":
                    global commit_flag
                    commit_flag = True
                elif i == "-i":
                    global init_flag
                    init_flag = True 
                elif i == "-h":
                    global help_flag
                    help_flag = True
                    break

def main():
    getArgs()
    if help_flag == True:
        help()
    else:
        spark_it()
    
if __name__ == '__main__':
    main()